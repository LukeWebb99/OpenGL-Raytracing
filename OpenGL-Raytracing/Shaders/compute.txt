#version 440
const float PI = 3.14159265f;
const float infinity = 1.0 / 0.0;

layout (local_size_x = 1, local_size_y = 1) in;
layout (rgba32f, binding = 0) uniform image2D img_output;

uniform mat4 u_cameraToWorld;
uniform mat4 u_cameraInverseProjection;

uniform sampler2D u_skyboxTexture;

uniform vec2 u_pixelOffset;

uniform int u_rayBounceLimit;

uniform vec3 u_specular;
uniform vec3 u_albedo;
uniform vec4 u_directionalLight;

uniform float u_smoothness;

uniform bool u_toggleShadow;
uniform bool u_togglePlane;

uniform float u_seed;
float l_seed;
ivec2 pixel_coords;

bool hitsky = false;


float rand() {

    float result = fract(sin(l_seed / 100.0f * dot(pixel_coords, vec2(12.9898f, 78.233f))) * 43758.5453f);
    l_seed += 1.0f;
    return result;
}

mat3x3 GetTangentSpace(vec3 normal) {
   // Choose a helper vector for the cross product
    vec3 helper = vec3(1, 0, 0);
    if (abs(normal.x) > 1.f)
        helper = vec3(0, 0, 1);

    // Generate vectors
    vec3 tangent = normalize(cross(normal, helper));
    vec3 binormal = normalize(cross(normal, tangent));
    return mat3x3(tangent, binormal, normal);
}

struct Sphere {
   float radius;
   vec3 position;
   vec3 albedo;
   vec3 specular;
};

uniform Sphere u_sphere;

struct Ray {
    vec3 origin;
    vec3 direction;
    vec3 energy;
};

Ray CreateRay(vec3 origin, vec3 direction) {
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    ray.energy = vec3(1.0f, 1.0f, 1.0f);
    return ray;
}

Ray CreateCameraRay(vec2 uv) {

    //camera orgin to world space
    vec3 origin = (u_cameraToWorld * vec4(0.f, 0.f, 0.f, 1.f)).xyz;

    //invert prespective
    vec3 direction = (u_cameraInverseProjection * vec4(uv, 0.f, 1.f)).xyz;

    // Transform the direction from camera to world space and normalize
    direction = (u_cameraToWorld * vec4(direction, 0.0f)).xyz;
    direction = normalize(direction);

    return CreateRay(origin, direction);
}

struct RayHit {
    vec3 position;
    float distance;
    vec3 normal;
	vec3 specular;
    vec3 albedo;
};

RayHit CreateRayHit() {
    RayHit hit;
    hit.position = vec3(0.0f, 0.0f, 0.0f);
    hit.distance = infinity;
    hit.normal = vec3(0.0f, 0.0f, 0.0f);
    hit.specular = vec3(0.f, 0.f, 0.f);
    hit.albedo = vec3(0.f, 0.f, 0.f);
    return hit;
}

vec3 SampleHemisphere(vec3 normal, float alpha) {

    // Sample the hemisphere, where alpha determines the kind of the sampling
    float cosTheta = pow(rand(), 1.0f / (alpha + 1.0f));
    float sinTheta = sqrt(1.0f - cosTheta * cosTheta);
    float phi = 2 * PI * rand();
    vec3 tangentSpaceDir = vec3(cos(phi) * sinTheta, sin(phi) * sinTheta, cosTheta);
    // Transform direction to world space
    return GetTangentSpace(normal) * tangentSpaceDir;
}

void IntersectGroundPlane(Ray ray, inout RayHit bestHit) {

    // Calculate distance along the ray where the ground plane is intersected
    float t = -ray.origin.y / ray.direction.y;
    if (t > 0 && t < bestHit.distance) {
        bestHit.distance = t;
        bestHit.position = ray.origin + t * ray.direction;
        bestHit.normal = vec3(0.0f, 1.0f, 0.0f);
        bestHit.specular = vec3(0.15);
        bestHit.albedo = vec3(0.5);
    }
}

void IntersectSphere(Ray ray, inout RayHit bestHit, Sphere sphere) {

    // Calculate distance along the ray where the sphere is intersected
    vec3 d = ray.origin - sphere.position;
    float p1 = -dot(ray.direction, d);
    float p2sqr = p1 * p1 - dot(d, d) + sphere.radius * sphere.radius;

    if (p2sqr < 0)
        return;

    float p2 = sqrt(p2sqr);
    float t = p1 - p2 > 0 ? p1 - p2 : p1 + p2;
    if (t > 0 && t < bestHit.distance)
    {
        bestHit.distance = t;
        bestHit.position = ray.origin + t * ray.direction;
        bestHit.normal = normalize(bestHit.position - sphere.position);
        bestHit.albedo = sphere.albedo;
        bestHit.specular = sphere.specular;
    }
}

RayHit Trace(Ray ray) {
    RayHit bestHit = CreateRayHit();
    if(u_togglePlane){
        IntersectGroundPlane(ray, bestHit);
    }
    IntersectSphere(ray, bestHit, u_sphere);
    return bestHit;
}

float sdot(vec3 x, vec3 y, float f) {
    return clamp(dot(x, y) * f, 0, 1);
}

float energy(vec3 color) {
    return dot(color, vec3(1.0f / 3.0f));
}

float SmoothnessToPhongAlpha(float s) {
    return pow(1000.0f, s * s);
}

vec4 Shade(inout Ray ray, RayHit hit) {

    if (hit.distance < infinity) {
     
       // Calculate chances of diffuse and specular reflection
       hit.albedo = max(1.0f - hit.specular, hit.albedo);
       float specChance = energy(hit.specular);
       float diffChance = energy(hit.albedo);
       float sum = specChance * diffChance;
       specChance /= sum;
       diffChance /= sum;
       // Roulette-select the ray's path
       float alpha = SmoothnessToPhongAlpha(u_smoothness);
       vec3 reflection = reflect(ray.direction, hit.normal);
       float roulette = rand();
       if (roulette < specChance)
       {
           // Specular reflection
           ray.origin = hit.position + hit.normal * 0.001f;
           ray.direction = SampleHemisphere(reflection, alpha);
           float f = (alpha + 2) / (alpha + 1);
           ray.energy *= (1.0f / specChance) * hit.specular * sdot(hit.normal, ray.direction, f);
       }
       else
       {
          // Diffuse reflection
          ray.origin = hit.position + hit.normal * 0.001f;
          ray.direction = SampleHemisphere(reflection, 1.f);
          ray.energy *= (1.0f / diffChance) * hit.albedo;
       }
       
       return vec4(vec3(clamp(dot(hit.normal, SampleHemisphere(hit.normal, 1.f)) * -1, 0.0, 1.0)), 1.f);

    } else {
        
        hitsky = true;

        float theta = acos(ray.direction.y) / -PI;
        float phi = atan(ray.direction.x, -ray.direction.z) / -PI * 0.5f;
        
        return vec4((texture(u_skyboxTexture, vec2(-phi, -theta))).xyz, 1.f);
    }

}


void main () {
    l_seed = u_seed;
    pixel_coords = ivec2(gl_GlobalInvocationID.xy);
    
    // Transform pixel to [-1,1] range
    vec2 uv = vec2((pixel_coords.xy + u_pixelOffset) / imageSize(img_output) * 2.0f - 1.0f);

    // Create View Ray
    Ray ray = CreateCameraRay(uv);

    // Trace and shade
    vec4 result = vec4(0, 0, 0, 0);
    for (int i = 0; i < u_rayBounceLimit; i++) {

        RayHit hit = Trace(ray); // Test if ray hit anything
        result += vec4(ray.energy, 1) * Shade(ray, hit); // Gen pixal colour 

        if(hitsky)  // If ray hits skybox set energy to null
           ray.energy = vec3(0);
  
        if (ray.energy.x == 0 && ray.energy.y == 0 && ray.energy.z == 0) // If ray-enery.xyz has no energy break;
            break;

    }
    
    // Store in outgoing texture
    imageStore(img_output, pixel_coords, vec4(result.xyz, 0.5f));
}